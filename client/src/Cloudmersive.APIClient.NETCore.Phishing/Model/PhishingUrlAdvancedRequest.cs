/* 
 * phishingapi
 *
 * Easily and directly scan and block phishing security threats.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.Phishing.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.Phishing.Model
{
    /// <summary>
    /// Request data for the advanced phishing validation apis
    /// </summary>
    [DataContract]
    public partial class PhishingUrlAdvancedRequest :  IEquatable<PhishingUrlAdvancedRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PhishingUrlAdvancedRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PhishingUrlAdvancedRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PhishingUrlAdvancedRequest" /> class.
        /// </summary>
        /// <param name="url">Full url data to be evaluated (required).</param>
        /// <param name="allowList">The caller may specify a collection of   hosts or domains which are always considered safe.&lt;br /&gt;  This is to allow internal sites to be marked as safe.</param>
        /// <param name="blockList">The caller may specify a collection of   hosts or domains which are always considered unsafe.&lt;br /&gt;  This is to allow internal sites to be marked as safe.</param>
        public PhishingUrlAdvancedRequest(string url = default(string), List<string> allowList = default(List<string>), List<string> blockList = default(List<string>))
        {
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new InvalidDataException("url is a required property for PhishingUrlAdvancedRequest and cannot be null");
            }
            else
            {
                this.Url = url;
            }
            this.AllowList = allowList;
            this.BlockList = blockList;
        }
        
        /// <summary>
        /// Full url data to be evaluated
        /// </summary>
        /// <value>Full url data to be evaluated</value>
        [DataMember(Name="Url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// The caller may specify a collection of   hosts or domains which are always considered safe.&lt;br /&gt;  This is to allow internal sites to be marked as safe
        /// </summary>
        /// <value>The caller may specify a collection of   hosts or domains which are always considered safe.&lt;br /&gt;  This is to allow internal sites to be marked as safe</value>
        [DataMember(Name="AllowList", EmitDefaultValue=false)]
        public List<string> AllowList { get; set; }

        /// <summary>
        /// The caller may specify a collection of   hosts or domains which are always considered unsafe.&lt;br /&gt;  This is to allow internal sites to be marked as safe
        /// </summary>
        /// <value>The caller may specify a collection of   hosts or domains which are always considered unsafe.&lt;br /&gt;  This is to allow internal sites to be marked as safe</value>
        [DataMember(Name="BlockList", EmitDefaultValue=false)]
        public List<string> BlockList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PhishingUrlAdvancedRequest {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  AllowList: ").Append(AllowList).Append("\n");
            sb.Append("  BlockList: ").Append(BlockList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PhishingUrlAdvancedRequest);
        }

        /// <summary>
        /// Returns true if PhishingUrlAdvancedRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PhishingUrlAdvancedRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PhishingUrlAdvancedRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.AllowList == input.AllowList ||
                    this.AllowList != null &&
                    this.AllowList.SequenceEqual(input.AllowList)
                ) && 
                (
                    this.BlockList == input.BlockList ||
                    this.BlockList != null &&
                    this.BlockList.SequenceEqual(input.BlockList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.AllowList != null)
                    hashCode = hashCode * 59 + this.AllowList.GetHashCode();
                if (this.BlockList != null)
                    hashCode = hashCode * 59 + this.BlockList.GetHashCode();
                return hashCode;
            }
        }
    }

}
