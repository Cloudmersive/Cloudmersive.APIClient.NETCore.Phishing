/* 
 * phishingapi
 *
 * Easily and directly scan and block phishing security threats.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.Phishing.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.Phishing.Model
{
    /// <summary>
    /// PhishingUrlAdvancedResponse
    /// </summary>
    [DataContract]
    public partial class PhishingUrlAdvancedResponse :  IEquatable<PhishingUrlAdvancedResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PhishingUrlAdvancedResponse" /> class.
        /// </summary>
        /// <param name="cleanResult">Specifies if the url (or its host or domain) passed all the checks or not..</param>
        /// <param name="risk">Risk value from 0.0 - 1.0. Higher numbers are a higher risk  &lt;br /&gt;Anything below 0.3 should be considered safe. Anything above 0.7 should be considered a significant risk. &lt;br /&gt;  A score of 1.0 indicates the url, host, or domain failed significant safety checks.&lt;br /&gt;  If a url passes all the tests for the basic api, the risk will be 0.7. If a url passes all the tests for the advanced api, the risk will be 0.2..</param>
        /// <param name="containsThreatUrl">Specifies if the full url with query parameters and fragment is a phishing threat  &lt;br /&gt;The advanced api performs more checks on the full url..</param>
        /// <param name="containsThreatHost">Specifies if the host of the url (i.e. &#x60;&#x60;&#x60;mysite.hostingsite.com&#x60;&#x60;&#x60; for a url of &#x60;&#x60;&#x60;https://mysite.hostingsite.com/index.html&#x60;&#x60;&#x60;) is a phishing threat  &lt;br /&gt;The advanced api performs more checks on the host.</param>
        /// <param name="containsThreatDomain">Specifies if the registerable domain of the url (i.e. &#x60;&#x60;&#x60;hostingsite.com&#x60;&#x60;&#x60; for a url of &#x60;&#x60;&#x60;https://mysite.hostingsite.com/index.html&#x60;&#x60;&#x60;) is a phishing threat  &lt;br /&gt;The advanced api performs more checks on the domain.</param>
        /// <param name="containsThreatSSRF">The url that was provided or the destination url after redirection contains an SSRF threat.</param>
        /// <param name="containsThreatUrlFormat">The url that was provided or the destination url after redirection is an unsafe format.</param>
        /// <param name="containsThreatDomainQuality">The domain of the destination url is low quality..</param>
        /// <param name="containsThreatDomainAge">The domain of the destination url has been registered too recently..</param>
        /// <param name="urlIsInvalidSyntax">Specifies if the url was malformed or not.</param>
        /// <param name="inputUrl">Input URL that was scanned.</param>
        public PhishingUrlAdvancedResponse(bool? cleanResult = default(bool?), double? risk = default(double?), bool? containsThreatUrl = default(bool?), bool? containsThreatHost = default(bool?), bool? containsThreatDomain = default(bool?), bool? containsThreatSSRF = default(bool?), bool? containsThreatUrlFormat = default(bool?), bool? containsThreatDomainQuality = default(bool?), bool? containsThreatDomainAge = default(bool?), bool? urlIsInvalidSyntax = default(bool?), string inputUrl = default(string))
        {
            this.CleanResult = cleanResult;
            this.Risk = risk;
            this.ContainsThreatUrl = containsThreatUrl;
            this.ContainsThreatHost = containsThreatHost;
            this.ContainsThreatDomain = containsThreatDomain;
            this.ContainsThreatSSRF = containsThreatSSRF;
            this.ContainsThreatUrlFormat = containsThreatUrlFormat;
            this.ContainsThreatDomainQuality = containsThreatDomainQuality;
            this.ContainsThreatDomainAge = containsThreatDomainAge;
            this.UrlIsInvalidSyntax = urlIsInvalidSyntax;
            this.InputUrl = inputUrl;
        }
        
        /// <summary>
        /// Specifies if the url (or its host or domain) passed all the checks or not.
        /// </summary>
        /// <value>Specifies if the url (or its host or domain) passed all the checks or not.</value>
        [DataMember(Name="CleanResult", EmitDefaultValue=false)]
        public bool? CleanResult { get; set; }

        /// <summary>
        /// Risk value from 0.0 - 1.0. Higher numbers are a higher risk  &lt;br /&gt;Anything below 0.3 should be considered safe. Anything above 0.7 should be considered a significant risk. &lt;br /&gt;  A score of 1.0 indicates the url, host, or domain failed significant safety checks.&lt;br /&gt;  If a url passes all the tests for the basic api, the risk will be 0.7. If a url passes all the tests for the advanced api, the risk will be 0.2.
        /// </summary>
        /// <value>Risk value from 0.0 - 1.0. Higher numbers are a higher risk  &lt;br /&gt;Anything below 0.3 should be considered safe. Anything above 0.7 should be considered a significant risk. &lt;br /&gt;  A score of 1.0 indicates the url, host, or domain failed significant safety checks.&lt;br /&gt;  If a url passes all the tests for the basic api, the risk will be 0.7. If a url passes all the tests for the advanced api, the risk will be 0.2.</value>
        [DataMember(Name="Risk", EmitDefaultValue=false)]
        public double? Risk { get; set; }

        /// <summary>
        /// Specifies if the full url with query parameters and fragment is a phishing threat  &lt;br /&gt;The advanced api performs more checks on the full url.
        /// </summary>
        /// <value>Specifies if the full url with query parameters and fragment is a phishing threat  &lt;br /&gt;The advanced api performs more checks on the full url.</value>
        [DataMember(Name="ContainsThreatUrl", EmitDefaultValue=false)]
        public bool? ContainsThreatUrl { get; set; }

        /// <summary>
        /// Specifies if the host of the url (i.e. &#x60;&#x60;&#x60;mysite.hostingsite.com&#x60;&#x60;&#x60; for a url of &#x60;&#x60;&#x60;https://mysite.hostingsite.com/index.html&#x60;&#x60;&#x60;) is a phishing threat  &lt;br /&gt;The advanced api performs more checks on the host
        /// </summary>
        /// <value>Specifies if the host of the url (i.e. &#x60;&#x60;&#x60;mysite.hostingsite.com&#x60;&#x60;&#x60; for a url of &#x60;&#x60;&#x60;https://mysite.hostingsite.com/index.html&#x60;&#x60;&#x60;) is a phishing threat  &lt;br /&gt;The advanced api performs more checks on the host</value>
        [DataMember(Name="ContainsThreatHost", EmitDefaultValue=false)]
        public bool? ContainsThreatHost { get; set; }

        /// <summary>
        /// Specifies if the registerable domain of the url (i.e. &#x60;&#x60;&#x60;hostingsite.com&#x60;&#x60;&#x60; for a url of &#x60;&#x60;&#x60;https://mysite.hostingsite.com/index.html&#x60;&#x60;&#x60;) is a phishing threat  &lt;br /&gt;The advanced api performs more checks on the domain
        /// </summary>
        /// <value>Specifies if the registerable domain of the url (i.e. &#x60;&#x60;&#x60;hostingsite.com&#x60;&#x60;&#x60; for a url of &#x60;&#x60;&#x60;https://mysite.hostingsite.com/index.html&#x60;&#x60;&#x60;) is a phishing threat  &lt;br /&gt;The advanced api performs more checks on the domain</value>
        [DataMember(Name="ContainsThreatDomain", EmitDefaultValue=false)]
        public bool? ContainsThreatDomain { get; set; }

        /// <summary>
        /// The url that was provided or the destination url after redirection contains an SSRF threat
        /// </summary>
        /// <value>The url that was provided or the destination url after redirection contains an SSRF threat</value>
        [DataMember(Name="ContainsThreatSSRF", EmitDefaultValue=false)]
        public bool? ContainsThreatSSRF { get; set; }

        /// <summary>
        /// The url that was provided or the destination url after redirection is an unsafe format
        /// </summary>
        /// <value>The url that was provided or the destination url after redirection is an unsafe format</value>
        [DataMember(Name="ContainsThreatUrlFormat", EmitDefaultValue=false)]
        public bool? ContainsThreatUrlFormat { get; set; }

        /// <summary>
        /// The domain of the destination url is low quality.
        /// </summary>
        /// <value>The domain of the destination url is low quality.</value>
        [DataMember(Name="ContainsThreatDomainQuality", EmitDefaultValue=false)]
        public bool? ContainsThreatDomainQuality { get; set; }

        /// <summary>
        /// The domain of the destination url has been registered too recently.
        /// </summary>
        /// <value>The domain of the destination url has been registered too recently.</value>
        [DataMember(Name="ContainsThreatDomainAge", EmitDefaultValue=false)]
        public bool? ContainsThreatDomainAge { get; set; }

        /// <summary>
        /// Specifies if the url was malformed or not
        /// </summary>
        /// <value>Specifies if the url was malformed or not</value>
        [DataMember(Name="UrlIsInvalidSyntax", EmitDefaultValue=false)]
        public bool? UrlIsInvalidSyntax { get; set; }

        /// <summary>
        /// Input URL that was scanned
        /// </summary>
        /// <value>Input URL that was scanned</value>
        [DataMember(Name="InputUrl", EmitDefaultValue=false)]
        public string InputUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PhishingUrlAdvancedResponse {\n");
            sb.Append("  CleanResult: ").Append(CleanResult).Append("\n");
            sb.Append("  Risk: ").Append(Risk).Append("\n");
            sb.Append("  ContainsThreatUrl: ").Append(ContainsThreatUrl).Append("\n");
            sb.Append("  ContainsThreatHost: ").Append(ContainsThreatHost).Append("\n");
            sb.Append("  ContainsThreatDomain: ").Append(ContainsThreatDomain).Append("\n");
            sb.Append("  ContainsThreatSSRF: ").Append(ContainsThreatSSRF).Append("\n");
            sb.Append("  ContainsThreatUrlFormat: ").Append(ContainsThreatUrlFormat).Append("\n");
            sb.Append("  ContainsThreatDomainQuality: ").Append(ContainsThreatDomainQuality).Append("\n");
            sb.Append("  ContainsThreatDomainAge: ").Append(ContainsThreatDomainAge).Append("\n");
            sb.Append("  UrlIsInvalidSyntax: ").Append(UrlIsInvalidSyntax).Append("\n");
            sb.Append("  InputUrl: ").Append(InputUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PhishingUrlAdvancedResponse);
        }

        /// <summary>
        /// Returns true if PhishingUrlAdvancedResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PhishingUrlAdvancedResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PhishingUrlAdvancedResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CleanResult == input.CleanResult ||
                    (this.CleanResult != null &&
                    this.CleanResult.Equals(input.CleanResult))
                ) && 
                (
                    this.Risk == input.Risk ||
                    (this.Risk != null &&
                    this.Risk.Equals(input.Risk))
                ) && 
                (
                    this.ContainsThreatUrl == input.ContainsThreatUrl ||
                    (this.ContainsThreatUrl != null &&
                    this.ContainsThreatUrl.Equals(input.ContainsThreatUrl))
                ) && 
                (
                    this.ContainsThreatHost == input.ContainsThreatHost ||
                    (this.ContainsThreatHost != null &&
                    this.ContainsThreatHost.Equals(input.ContainsThreatHost))
                ) && 
                (
                    this.ContainsThreatDomain == input.ContainsThreatDomain ||
                    (this.ContainsThreatDomain != null &&
                    this.ContainsThreatDomain.Equals(input.ContainsThreatDomain))
                ) && 
                (
                    this.ContainsThreatSSRF == input.ContainsThreatSSRF ||
                    (this.ContainsThreatSSRF != null &&
                    this.ContainsThreatSSRF.Equals(input.ContainsThreatSSRF))
                ) && 
                (
                    this.ContainsThreatUrlFormat == input.ContainsThreatUrlFormat ||
                    (this.ContainsThreatUrlFormat != null &&
                    this.ContainsThreatUrlFormat.Equals(input.ContainsThreatUrlFormat))
                ) && 
                (
                    this.ContainsThreatDomainQuality == input.ContainsThreatDomainQuality ||
                    (this.ContainsThreatDomainQuality != null &&
                    this.ContainsThreatDomainQuality.Equals(input.ContainsThreatDomainQuality))
                ) && 
                (
                    this.ContainsThreatDomainAge == input.ContainsThreatDomainAge ||
                    (this.ContainsThreatDomainAge != null &&
                    this.ContainsThreatDomainAge.Equals(input.ContainsThreatDomainAge))
                ) && 
                (
                    this.UrlIsInvalidSyntax == input.UrlIsInvalidSyntax ||
                    (this.UrlIsInvalidSyntax != null &&
                    this.UrlIsInvalidSyntax.Equals(input.UrlIsInvalidSyntax))
                ) && 
                (
                    this.InputUrl == input.InputUrl ||
                    (this.InputUrl != null &&
                    this.InputUrl.Equals(input.InputUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CleanResult != null)
                    hashCode = hashCode * 59 + this.CleanResult.GetHashCode();
                if (this.Risk != null)
                    hashCode = hashCode * 59 + this.Risk.GetHashCode();
                if (this.ContainsThreatUrl != null)
                    hashCode = hashCode * 59 + this.ContainsThreatUrl.GetHashCode();
                if (this.ContainsThreatHost != null)
                    hashCode = hashCode * 59 + this.ContainsThreatHost.GetHashCode();
                if (this.ContainsThreatDomain != null)
                    hashCode = hashCode * 59 + this.ContainsThreatDomain.GetHashCode();
                if (this.ContainsThreatSSRF != null)
                    hashCode = hashCode * 59 + this.ContainsThreatSSRF.GetHashCode();
                if (this.ContainsThreatUrlFormat != null)
                    hashCode = hashCode * 59 + this.ContainsThreatUrlFormat.GetHashCode();
                if (this.ContainsThreatDomainQuality != null)
                    hashCode = hashCode * 59 + this.ContainsThreatDomainQuality.GetHashCode();
                if (this.ContainsThreatDomainAge != null)
                    hashCode = hashCode * 59 + this.ContainsThreatDomainAge.GetHashCode();
                if (this.UrlIsInvalidSyntax != null)
                    hashCode = hashCode * 59 + this.UrlIsInvalidSyntax.GetHashCode();
                if (this.InputUrl != null)
                    hashCode = hashCode * 59 + this.InputUrl.GetHashCode();
                return hashCode;
            }
        }
    }

}
