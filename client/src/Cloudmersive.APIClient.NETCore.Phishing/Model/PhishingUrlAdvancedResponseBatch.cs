/* 
 * phishingapi
 *
 * Easily and directly scan and block phishing security threats.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.Phishing.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.Phishing.Model
{
    /// <summary>
    /// Responses for the advanced batch calls to Phishing Url
    /// </summary>
    [DataContract]
    public partial class PhishingUrlAdvancedResponseBatch :  IEquatable<PhishingUrlAdvancedResponseBatch>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PhishingUrlAdvancedResponseBatch" /> class.
        /// </summary>
        /// <param name="cleanResult">Specifies if all the urls (or its hosts or domains) in this batch call passed all the checks or not..</param>
        /// <param name="urlResponses">Resulting URL validations.</param>
        public PhishingUrlAdvancedResponseBatch(bool? cleanResult = default(bool?), List<PhishingUrlAdvancedResponse> urlResponses = default(List<PhishingUrlAdvancedResponse>))
        {
            this.CleanResult = cleanResult;
            this.UrlResponses = urlResponses;
        }
        
        /// <summary>
        /// Specifies if all the urls (or its hosts or domains) in this batch call passed all the checks or not.
        /// </summary>
        /// <value>Specifies if all the urls (or its hosts or domains) in this batch call passed all the checks or not.</value>
        [DataMember(Name="CleanResult", EmitDefaultValue=false)]
        public bool? CleanResult { get; set; }

        /// <summary>
        /// Resulting URL validations
        /// </summary>
        /// <value>Resulting URL validations</value>
        [DataMember(Name="UrlResponses", EmitDefaultValue=false)]
        public List<PhishingUrlAdvancedResponse> UrlResponses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PhishingUrlAdvancedResponseBatch {\n");
            sb.Append("  CleanResult: ").Append(CleanResult).Append("\n");
            sb.Append("  UrlResponses: ").Append(UrlResponses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PhishingUrlAdvancedResponseBatch);
        }

        /// <summary>
        /// Returns true if PhishingUrlAdvancedResponseBatch instances are equal
        /// </summary>
        /// <param name="input">Instance of PhishingUrlAdvancedResponseBatch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PhishingUrlAdvancedResponseBatch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CleanResult == input.CleanResult ||
                    (this.CleanResult != null &&
                    this.CleanResult.Equals(input.CleanResult))
                ) && 
                (
                    this.UrlResponses == input.UrlResponses ||
                    this.UrlResponses != null &&
                    this.UrlResponses.SequenceEqual(input.UrlResponses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CleanResult != null)
                    hashCode = hashCode * 59 + this.CleanResult.GetHashCode();
                if (this.UrlResponses != null)
                    hashCode = hashCode * 59 + this.UrlResponses.GetHashCode();
                return hashCode;
            }
        }
    }

}
